name: Pre-Release

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
      - unlabeled

jobs:

  generate-version:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.out.outputs.version }}
      plain-version: ${{ steps.out.outputs.plain-version }}

    steps:
      - uses: actions/checkout@v2

      - id: bump
        uses: zwaldowski/match-label-action@v1
        with:
          allowed: major,minor,patch

      - uses: zwaldowski/semver-release-action@v2
        with:
          dry_run: true
          bump: ${{ steps.bump.outputs.match }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR Number
        id: pr_number
        run: echo "::set-output name=nr::$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')"

      - name: Set version output
        id: out
        run: |
          echo "::set-output name=version::$(echo ${VERSION}-PRE-${{ steps.pr_number.outputs.nr }})"
          echo "::set-output name=plain-version::$(echo ${VERSION})"

  build-pep-plugin:
    needs: ["generate-version"]
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Build pep-plugin 
        run: |
          cd ./kong-pep-plugin 
          go mod tidy && GOOS=linux GOARCH=amd64 go build -ldflags "-X pep-plugin.Version=0.0.1" -o pep-plugin .
        
      - uses: actions/upload-artifact@v2
        with:
          name: pep-plugin
          path: ./kong-pep-plugin/pep-plugin
      

  git-release:
    needs: ["generate-version", "build-pep-plugin"]
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: pep-plugin
          path: ./go-plugins/


      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ needs.generate-version.outputs.version }}
          prerelease: true
          title: ${{ needs.generate-version.outputs.version }}
          files: |
            ./go-plugins/pep-plugin
          

  pre-release-kong:
    needs: ["git-release", "generate-version"]
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'

      - uses: actions/download-artifact@v2
        with:
          name: pep-plugin
          path: ./go-plugins/


      - name: Prepare values
        run: | 
          echo GITHUB_ORGANISATION: fiware >> values.yaml
          echo GITHUB_REPO: kong-plugins-fiware >> values.yaml
          echo VERSION: ${{ needs.generate-version.outputs.plain-version }} >> values.yaml


      - name: Parse rockspec
        run: |
          go install github.com/cbroglie/mustache/cmd/mustache@v1.3.1
          ~/go/bin/mustache values.yaml kong-plugin-auth-endpoint-config-ishare/rockspec.mustache > kong-plugin-auth-endpoint-config-ishare/kong-plugin-auth-endpoint-config-ishare-${{ needs.generate-version.outputs.plain-version }}-1.rockspec
          ~/go/bin/mustache values.yaml kong-plugin-ngsi-ishare-policies/rockspec.mustache > kong-plugin-ngsi-ishare-policies/kong-plugin-ngsi-ishare-policies-${{ needs.generate-version.outputs.plain-version }}-1.rockspec
      
      - uses: leafo/gh-actions-lua@v9
      - uses: leafo/gh-actions-luarocks@v4
      
      - name: Make rock
        run: |
          cd kong-plugin-auth-endpoint-config-ishare
          luarocks make
          luarocks pack kong-plugin-auth-endpoint-config-ishare ${{ needs.generate-version.outputs.plain-version }}-1
          cd ..
          cd kong-plugin-ngsi-ishare-policies
          luarocks make 
          luarocks pack kong-plugin-ngsi-ishare-policies ${{ needs.generate-version.outputs.plain-version }}-1
          cd ..
          mkdir plugin-dir
          cp -r kong-plugin-auth-endpoint-config-ishare/.  plugin-dir/
          cp -r kong-plugin-ngsi-ishare-policies/.  plugin-dir/
          cd plugin-dir/
          luarocks install lua-fiware-lib
          luarocks pack lua-fiware-lib
          luarocks install lua-resty-jwt
          luarocks pack lua-resty-jwt

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
    
      - name: Log into quay
        run: docker login -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io

      - name: Get dockerfiles
        run: |
          wget https://raw.githubusercontent.com/Kong/docker-kong/master/customize/Dockerfile
          wget https://raw.githubusercontent.com/Kong/docker-kong/master/customize/empty_file
          wget https://raw.githubusercontent.com/Kong/docker-kong/master/customize/packer.lua

      - name: Insert go plugins
        run: |
          echo "USER root" >> Dockerfile
          echo "COPY ./go-plugins /kong/go-plugins" >> Dockerfile
          echo "RUN chmod -R 777 /kong/go-plugins/" >> Dockerfile
          echo "USER kong" >> Dockerfile

      - name: Build and push
        run: |
          docker build --build-arg KONG_BASE="kong:2.8.1-alpine" --build-arg PLUGINS="lua-fiware-lib,kong-plugin-auth-endpoint-config-ishare,kong-plugin-ngsi-ishare-policies" --build-arg ROCKS_DIR="./plugin-dir" --tag quay.io/fiware/kong:${{ needs.generate-version.outputs.version }} .
  
          docker push quay.io/fiware/kong:${{ needs.generate-version.outputs.version }}